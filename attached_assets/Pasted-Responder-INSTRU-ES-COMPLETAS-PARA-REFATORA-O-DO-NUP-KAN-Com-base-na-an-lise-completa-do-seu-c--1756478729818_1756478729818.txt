Responder
üöÄ INSTRU√á√ïES COMPLETAS PARA REFATORA√á√ÉO DO NUP-KAN
Com base na an√°lise completa do seu c√≥digo, aqui est√£o as instru√ß√µes claras para o Replit refatorar e otimizar seu sistema:

üìã FASE 1: SIMPLIFICA√á√ÉO DO SISTEMA DE AUTENTICA√á√ÉO
Instru√ß√£o 1: Criar Novo Sistema de Autentica√ß√£o Simplificado
Crie um novo arquivo `server/auth/simpleAuth.ts` com as seguintes funcionalidades:

1. Interface User simplificada:
```typescript
interface User {
  id: string;
  name: string;
  email: string;
  avatar?: string;
  permissions: string[];
  profileId?: string;
}

interface AuthRequest extends Request {
  user?: User;
}
Fun√ß√£o para buscar usu√°rio com permiss√µes (UMA √öNICA QUERY): ```typescript async function getUserWithPermissions(userId: string): Promise<User | null> { const result = await db .select({ id: usu√°rios.id, nome: usu√°rios.nome, e-mail: usu√°rios.email, avatar: usu√°rios.avatar, profileId: usu√°rios.profileId, permiss√µes: sql<string[]>  COALESCE(    ARRAY_AGG(DISTINCT p.name) FILTER (WHERE p.name IS NOT NULL),    ARRAY[]::text[]  )    }) .from(usu√°rios) .leftJoin(perfis, eq(usu√°rios.profileId, perfis.id)) .leftJoin(permiss√µes de perfil, eq(perfis.id, perfis.permiss√µes.profileId)) .leftJoin(permiss√µes, eq(permiss√µes de perfil.permiss√£oId, permiss√µes.id)) .where(eq(usu√°rios.id, usu√°rioId)) .groupBy(usu√°rios.id, usu√°rios.nome, usu√°rios.email, usu√°rios.avatar, usu√°rios.profileId);
retornar resultado[0] || nulo; }


3. Middleware unificado que substitui AuthMiddleware.requireAuth + AuthMiddleware.requirePermissions:
```typescript
export const auth = (requiredPermissions?: string | string[]) => {
  return async (req: AuthRequest, res: Response, next: NextFunction) => {
    // Implementar l√≥gica completa aqui
  };
};
IMPORTANTE: Mantenha TODAS as 26 fun√ß√µes existentes funcionando exatamente iguais.


### **Instru√ß√£o 2: Otimizar Redis Cache**
Habilite o Redis no arquivo server/cache.ts:

Remova a linha que desabilita o Redis
Configurar conex√£o adequada com Redis
Implementar cache hier√°rquico com diferentes TTLs
Crie cache espec√≠fico para auth: ```typescript class AuthCache { // Cache de usu√°rio: 1 hora async cacheUser(userId: string, userData: User): Promise

// Busca otimizada com pipeline async getUser(userId: string): Promise<User | nulo>

// Invalida√ß√£o inteligente async invalidateUser(userId: string): Promise }


3. Configure TTLs otimizados:
   - Dados b√°sicos do usu√°rio: 3600s (1 hora)
   - Permiss√µes: 1800s (30 minutos)  
   - Sess√£o ativa: 300s (5 minutos)